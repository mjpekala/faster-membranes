# For use with caffe's python interface.


name: "CiresanN3"

layer {
  type: "MemoryData"
  name: "data"
  top: "data"
  top: "label"
  memory_data_param {
    batch_size:  100
    channels:    1
    height:      65
    width:       65
  }
}


layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  # mjp: the different multiplier for the weights and 
  #      biases is because we are doing dropout with 
  #      p_dropout = .5 (e.g. see Gal, Ghahramani 
  #      "Dropout as a Bayesian Approximation: Appendix"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 48
    pad: 0
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2         # mjp: was 1 before...
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "pool1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    local_size: 3
    alpha: 5e-05
    beta: 0.75
  }
}


layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 48
    pad: 0
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2           # mjp: was 1 before
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    local_size: 3
    alpha: 5e-05 
    beta: 0.75
  }
}


layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 48
    pad: 0
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2         # mjp: was 1 before
  }
}


layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  inner_product_param {
    num_output: 200
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}

layer {
  name: "dropout"
  type: "Dropout"
  bottom: "ip1"
  top: "dropout"
  dropout_param {
    dropout_ratio: 0.5
    do_mc: true          # mjp: uncomment this line for monte carlo-based UQ
  }
}

layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "dropout"
  top: "ip2"
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  type: "SoftmaxWithLoss"
  name: "loss"
  top: "loss"
  bottom: "ip2"
  bottom: "label"
}


layer {
  name: "acc"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "acc"
#  include{ 
#    phase: TEST 
#  }
}


# This Softmax layer only exists to facilitate extracting predictions.
layer {
  name: "prob"
  type: "Softmax"
  bottom: "ip2"
  top: "prob"
#  include {
#    phase: TEST
#  }
}
